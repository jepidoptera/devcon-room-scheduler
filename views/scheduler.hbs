<header class="grid-container-atom header-molecule">
    <div class="grid-container-atom__width-enforcer">
        <div href="/" class="header-molecule__logo-link">
            <div class="logo-atom">
                <div class="logo-atom__logomark-container">
                    <a href="https://www.devcon.org" class="logo-atom__logo-link">
                        <div>
                            <img src="/images/ef.png" class="logomark-atom logo-atom__logo" alt="Ethereum crystal">
                        </div>
                    </a>
                </div>
                <div class="logo-atom__title-container">
                    <a href="https://www.devcon.org" class="logo-atom__logo-link">
                        <img src="/images/logotext-0.75x.png" class="logo-atom header-molecule__logo" alt="Devcon">
                    </a>
                </div>
            </div>
        </div>
    </div>
</header>
<nav class='header'>
    <div class = "header_widthContainer">
        <a href="/amphitheater" class="room_link">Lightning Talks</a>
        <a href="/meeting" class="room_link">Meeting Rooms</a>
    </div>
</nav>
<div class="tabButton_row_container">
    <div class="tabButton_row" id="days"></div>
    <div class="tabButton_row" id="rooms"></div>
</div>
<h1 class="pageTitle">{{title}}</h1>
<div id="tables" style="width: 100%; max-width: {{max_table_width}}"></div>
{{!-- <table id="timeslots">
    <tr>
        <th>Name</th>
        <th>Time</th>
        <th>Description</th>
        <th>Speakers</th>
    </tr>
</table> --}}

<script>
    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    let firstDay = "{{first_day}}";
    let lastDay = "{{last_day}}";
    let firstTalk = "{{first_talk}}";
    let lastTalk = "{{last_talk}}";

    let daySelected = '';
    let roomSelected = '';

    let bookings = [ {{#each bookings}} {
        name: '{{name}}', 
        description: '{{description}}', 
        room: '{{room}}', 
        start_at: '{{start_at}}', 
        end_at: '{{end_at}}', 
        speakers: [ {{#each speakers}}{{#if @index}},{{/if}} "{{name}}" {{/each}}] 
    }, {{/each}}];

    let headings = [{{#each headings}}
        { name: "{{Capitalize name}}", width: {{width}} },
    {{/each}}]

    let time_increment = {{time_increment}};
    let length_options = Array({{max_consecutive_slots}}).fill(0).map((value, i) => (i + 1) * time_increment);

    console.log(bookings);
    bookings = bookings
        .sort((a, b) => new Date(a.start_at).getTime() < new Date(b.start_at).getTime() ? -1 : 1)
        // ignore bookings which take place outside of regular hours
        .filter(time => new Date(time.start_at).getUTCHours() < parseInt(lastTalk) 
            || new Date(time.start_at).getUTCHours() == parseInt(lastTalk)
            && new Date(time.start_at).getUTCMinutes() <= parseInt(lastTalk.slice(3)));
            
    let rooms = { {{#each rooms}} "{{this}}":{ 
        bookings: [], 
        name: '{{this}}',
        shortName: '{{this}}'.split(' ').slice(1).join(' ')
    }, {{/each}} }
    // {room1: {bookings: []}, room2: {bookings: []}}

    $(() => {
        $(".modalBox").hide();

        // split into columns for each room
        for (i in bookings) {
            if (!rooms[bookings[i].room]) rooms[bookings[i].room] = {
                name: bookings[i].room,
                class_name: bookings[i].room.split(' ').join('_'), 
                bookings: []
            };
            let room = rooms[bookings[i].room];
            room.bookings.push(bookings[i]);
        }
        console.log(rooms);
        bookings = null;

        // build a timeline for each room
        Object.keys(rooms).forEach((key, roomIndex) => {
            let room = rooms[key];
            room.timeSlots = [];

            // push a final "talk" to cap off the end of the conference
            room.bookings.push({start_at: `2019-${lastDay}T${lastTalk}:00Z`})

            let time = new Date(`2019-${firstDay}T${firstTalk}:00Z`);

            // find blocks of time that aren't booked yet
            // the final array will include both scheduled bookings and open slots between them
            for (let i = 0; i < room.bookings.length; i++) {
                while (time.getUTCDate() !== new Date(room.bookings[i].start_at).getUTCDate()) {
                    // if the next talk isn't til the next day, we have to break up this time slot
                    if (time.getUTCHours() < parseInt(lastTalk)) {
                        room.timeSlots.push({
                            start_at: time.toISOString(), 
                            end_at: `2019-${(time.getUTCMonth() + 1).toString().padStart(2,"0")}-${time.getUTCDate().toString().padStart(2,"0")}T${lastTalk}:00Z`
                        })
                    }
                    // start again on the next day
                    time = new Date(time.getTime() + 86400000);
                    // at the beginning of the day, that is...
                    time.setUTCHours(parseInt(firstTalk), parseInt(firstTalk.slice(3)));
                }
                if (time.getTime() < new Date(room.bookings[i].start_at).getTime()) {
                    // push a new slot that starts where the current talk ends
                    room.timeSlots.push({start_at: time.toISOString(), end_at: room.bookings[i].start_at})
                }
                // and the next slot starts where this talk ends
                time = new Date(room.bookings[i].end_at);
                // push each talk as a filled time slot
                room.timeSlots.push({...room.bookings[i]});
            }
            // lose the tail
            room.timeSlots.pop();

            // for each room, a collection of tables
            // {room1: [day1, day2, day3], room2: [day1, day2, day3]}
            let roomTable = $("<div>")
                .addClass("roomTables")
                .addClass(room.name.split(' ').join('_'))

            if (roomIndex === 0) {
                if (Object.keys(rooms).length > 1) roomSelected = room.shortName;
                roomTable.appendTo($("#tables"))
            }
                // .css({"width": `${100 / Object.keys(rooms).length}%`})

            if (Object.keys(rooms).length > 1) {
                // add another row of tab buttons if there are multiple rooms
                $("#rooms")
                    .append($("<div>").addClass("tabButton_container")
                    .append($("<button>")
                        .addClass("tabButton")
                        .text(room.shortName)
                        .click(function() {
                            roomSelected = $(this).text();
                            updateTitle();
                            $("#rooms .tabButton").removeClass("bold");
                            $(this).addClass("bold");
                            $(".roomTables").remove();
                            $("#tables").append(roomTable);
                        })
                        .addClass(roomIndex === 0 ? "bold" : "")
                    )
                )
            }

            // for each day
            let dayTables = {};
            room.timeSlots.forEach((slot, i) => {
                let dateString = new Date(slot.start_at).toDateString().slice(0, -5);
                let dayString = "Day " + (Object.keys(dayTables).length + 1);
                if (!dayTables[dateString]) {
                    // add a table with headings
                    dayTables[dateString] = $("<table>")
                        .addClass("timeslots")
                        .addClass(`${dateString.split(" ").join("_")}`)
                        //.css({"width": "100%", "height": "100%"})
                        .append($("<tr>")
                            .append(
                                headings.map(heading => 
                                    {return `<th style='width:${heading.width}%'>${heading.name}</th>`}
                                ).join('')
                            )
                        )
                    
                    dayTables[dateString].appendTo(roomTable);
                    if (Object.keys(dayTables).length > 1) dayTables[dateString].hide();
                    else daySelected = dayString;
                    
                    // make a tab button for this day if one doesn't exist already
                    if ($(`#${dateString.split(" ").join("_")}.tabButton`).length === 0) {
                        $("#days")
                        .append($("<div>").addClass("tabButton_container")
                            .append($("<button>")
                                .addClass("tabButton")
                                .attr("id", `${dateString.split(" ").join("_")}`)
                                .text(dayString)
                                .click(function() {
                                    daySelected = dayString;
                                    updateTitle();
                                    $("table").hide();
                                    $(`.${dateString.split(" ").join("_")}`).show();
                                    $("#days .tabButton").removeClass("bold");
                                    $(this).addClass("bold");
                                })
                                .addClass(Object.keys(dayTables).length === 1 ? "bold" : "")
                            )
                        )
                    }
                }
                dayTables[dateString].append(
                    $("<tr>").append(
                        getTableRow(room, slot, i)
                    )
                )
            })
        })
        updateTitle();
    })
    function updateTitle() {
        $(".pageTitle").text(`{{title}}: ${roomSelected ? roomSelected + ", " : ""} ${daySelected}`)
    }

    function getTableRow(room, row, index) {
        // populate tables with readable formatting
        let htmlString = "";
        headings.forEach(heading => {
            if (heading.name === "Name" || heading.name === "Status") {
                htmlString += "<td>" 
                    + (row.name || `<button class="reserveButton" style='color: red' onclick='bookSlot("${room.name}", ${index})'>AVAILABLE - click to reserve</button>`) 
                    + "</td>"
            }
            else if (heading.name === "Time") {
                let start = new Date(row.start_at);
                let end = new Date(row.end_at);
                htmlString += `<td>${daysOfWeek[start.getUTCDay()]}, 
                    ${start.getUTCHours()}:${start.getUTCMinutes().toString().padStart(2, "0")} -
                    ${end.getUTCHours()}:${end.getUTCMinutes().toString().padStart(2, "0")}</td>`
            }
            else if (heading.name === "Description")
                htmlString += "<td>" + (row.description || "") + "</td>"
            else if (heading.name ==="Speakers")
                htmlString += "<td>" + (row.speakers ? row.speakers.join(', ') : "") + "</td>"
        })
        return htmlString;
    }
</script>

{{!-- note to self: should have used react for all this --}}
<link rel="stylesheet" href="css/inputBox.css">

<div class="modalBox">
    <div class="modalBoxTitle">Reserve Your Spot</div>
    <form id="scheduleForm" action="/reserve" method="POST">
        {{#each fields}}
            {{text}} <br> <input type="text" name="{{name}}" {{#if required}}required{{/if}} <br>
        {{/each}}
        email: <br> <input type="email" name="email" required><br>
        <div class="numberInputLine">
            start: 
            <span class="numberInput">
                <span class="numberInput_text" id="startTime"></span>
                <span class="numberInput_buttonContainer">
                    <div class="numberInput_button" id="timeUp"><span class="numberInput_button_text">▲</span></div>
                    <div class="numberInput_button" id="timeDown"><span class="numberInput_button_text">▼</span></div>
                </span>
            </span>
            length:
            <select name="length">
            </select>
            minutes
        </div>
        <br>
        <input type="text" style="display:none" name="start_at">
        <input type="text" style="display:none" name="room">
        <div class="modalBox_buttonContainer">
            <button type="submit">submit</button>
            <button onclick='cancelSubmit(event)'>cancel</button>
        </div>
    </form>
</div>

<script>
    length_options.forEach(option => {
        $("select[name='length']").append(
            `<option value="${option}">${option}</option>`
        )
    })

    function bookSlot(room, index) {
        let minTime = new Date(rooms[room].timeSlots[index].start_at).getTime();
        let maxTime = new Date(rooms[room].timeSlots[index].end_at).getTime();
        let currentTime = minTime;


        // disable longer length options when there is not enough time available
        length_options.forEach(option => {
            $(`option[value="${option}"]`).attr('disabled', (maxTime - minTime < 60000 * option))
        })

        // invisibly set room name
        $('input[name="room"').val(room);

        const changeTime = function(minutes = 0) {
            currentTime = Math.min(maxTime - $('select[name="length"]').val() * 60000, Math.max(currentTime + 60000 * minutes, minTime));
            updateTime();
            if (mousedown) {
                changeTimeInterval = Math.max(60, changeTimeInterval * .60);
                mouseDownTimeout = setTimeout(() => changeTime(minutes), changeTimeInterval);
            }
        }

        const updateTime = function() {
            let time = new Date(currentTime);
            $('#startTime').text(time.getUTCHours() + ":" + time.getUTCMinutes().toString().padStart(2, "0"));
            $('input[name="start_at"]').val(currentTime);
        }

        const changeTalkLength = function(event) {
            changeTime(0);
        }

        updateTime();

        let changeTimeInterval = 0;
        let mousedown = false;
        let mouseDownTimeout = null;
        $("#timeUp").off('mousedown').on('mousedown', () => {mousedown=true; changeTimeInterval = 500; changeTime(time_increment)});
        $("#timeDown").off('mousedown').on('mousedown', () => {mousedown=true; changeTimeInterval = 500; changeTime(-time_increment)});
        $("select[name=length]").on('change', changeTalkLength);
        $(document).mouseup(() => {mousedown = false; if (mouseDownTimeout) {clearTimeout(mouseDownTimeout)}});
        $(".modalBox").show();
    }

    function cancelSubmit(event) {
        event.preventDefault();
        $(".modalBox").hide();
    }
</script>